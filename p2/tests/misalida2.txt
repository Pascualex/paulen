//TOK_IDENTIFICADOR 300 Programa
TOK_IDENTIFICADOR 300 que
TOK_IDENTIFICADOR 300 eleva
TOK_IDENTIFICADOR 300 un
TOK_IDENTIFICADOR 300 numero
TOK_IDENTIFICADOR 300 x
TOK_IDENTIFICADOR 300 a
TOK_IDENTIFICADOR 300 la
TOK_IDENTIFICADOR 300 potencia
TOK_IDENTIFICADOR 300 y
TOK_MAIN 100 main
{//TOK_IDENTIFICADOR 300 Declarar
TOK_IDENTIFICADOR 300 variables
:TOK_IDENTIFICADOR 300 int
TOK_IDENTIFICADOR 300 x
,TOK_IDENTIFICADOR 300 y
;TOK_IDENTIFICADOR 300 int
TOK_IDENTIFICADOR 300 i
,TOK_IDENTIFICADOR 300 total
;//TOK_IDENTIFICADOR 300 ERROR
:TOK_IDENTIFICADOR 300 IDENTIFICADOR
TOK_IDENTIFICADOR 300 DE
TOK_IDENTIFICADOR 300 LONGITUD
>100TOK_IDENTIFICADOR 300 int
TOK_IDENTIFICADOR 300 x0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
;//TOK_IDENTIFICADOR 300 Leer
TOK_IDENTIFICADOR 300 x
TOK_IDENTIFICADOR 300 e
TOK_IDENTIFICADOR 300 y
:TOK_IDENTIFICADOR 300 scanf
TOK_IDENTIFICADOR 300 x
;TOK_IDENTIFICADOR 300 scanf
TOK_IDENTIFICADOR 300 y
;//TOK_IDENTIFICADOR 300 Calcular
TOK_IDENTIFICADOR 300 la
TOK_IDENTIFICADOR 300 potencia
:TOK_IDENTIFICADOR 300 i
=1;TOK_IDENTIFICADOR 300 total
=1;TOK_IDENTIFICADOR 300 while
(TOK_IDENTIFICADOR 300 i
<=TOK_IDENTIFICADOR 300 y
){TOK_IDENTIFICADOR 300 total
=TOK_IDENTIFICADOR 300 total
*TOK_IDENTIFICADOR 300 x
;TOK_IDENTIFICADOR 300 i
=TOK_IDENTIFICADOR 300 i
+1;}//TOK_IDENTIFICADOR 300 Mostrar
TOK_IDENTIFICADOR 300 resultado
:TOK_IDENTIFICADOR 300 printf
TOK_IDENTIFICADOR 300 total
;}